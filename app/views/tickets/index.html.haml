:javascript
  var projectId = #{@project.id};

%ul.tickets-actions
  %li.relative-it= link_to 'Add a new ticket'.html_safe, new_project_ticket_path, :remote => true, :class => 'button green add-ticket menu-popup menu-popup-window bright-green'

.tickets-lists

- if @tickets.class == Hash
  - if @tickets[:both]
    - unless @tickets[:both][1].empty?
      %h3.tickets-header= @tickets[:both][0]

      %ul.tickets-list
        - @tickets[:both][1].each do |ticket|
          = render ticket

  - if @tickets[:other]
    - @tickets[:other].each do |ticket|
      - unless ticket[1].empty?
        %h3.tickets-header= ticket[0]

        %ul.tickets-list
          - ticket[1].each do |t|
            = render t

- if @tickets.class == Array
  %h3.tickets-header All Tickets

  %ul.tickets-list
    - @tickets.each do |ticket|
      = render ticket

%ul#ui-sorting-helper.tickets-list

- content_for :meta_footer do
  %form{:id => 'tags_search', :method => 'get', :action => project_tickets_path}
    = label_tag 'Search'
    %input{:name => 'tags', :placeholder => 'first_tag, second_tag'}
    %input{:type => 'submit', :value => 'Show'}

  .select-tag-filter
    %form
      = label_tag 'Select tag'
      = select_tag 'tags', options_for_select(@tags.map {|t| [t.name, project_tickets_path + "?tags=#{t.name}"] } ), :class => 'select-tag'

#ticket-template
  %p Edit Tickets
  %br
  = semantic_form_for [@project, @ticket], :url => bulk_update_project_tickets_path  do |f|
    = f.inputs do
      -#= f.input :tag_list
      = f.input :assigned_to, :collection => @project.users.map {|user| [user.email, user.id]}
      = f.input :status, :collection => @project.ticket_statuses.map {|status| [status.name, status.id]}
      = f.input :type, :collection => @project.ticket_types.map {|type| [type.name, type.id]}
    = f.buttons do
      %li{:class => 'commit'}= f.submit 'Update Tickets'
  
